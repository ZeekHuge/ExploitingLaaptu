// Let string to search for "aka" which occurs k strings after "oho"
// then "oho" will be put in "search_for" array and k will be put in Mth_next
// ther is an array "search_for" having the strings to search for
// and an array "Mth_next" for the vales of m. The number of strings
// to find for is in the variable "n_strings" directive
// the search is carried out in the file "targetFile" in the #define
//
//

#define end_up_tag ">Log Out (Zeek Huge)</a></td></tr></tbody></table><a class="
#define end_greater_tag "</html"
#include<stdio.h>
#include<string.h>
#define here fprintf(stderr,"\nhere\n")

FILE *output_file  ;
char wordChange1 , wordChange2 ;
char endTag[200] ; 
int endTagChooser = 1;

int strCompare( char* a, char* b )
{
 if (strlen (a) == strlen(b))
 {
  int i =strlen(a) ;
  while(i--)
  {                                                   
   if (*(a+i) != *(b+i) )
   return 0;
  }
  return 1 ;
 }
 return 0 ;
}




void get_next_word( char str[] )
{
    int long size =0 ;
    char ch ;
  
    ch = fgetc(output_file) ;
    
    
    while ( (ch == wordChange1 || ch == wordChange2 || ch == '\r' || ch == '\n') && (ch!=EOF))
    {
        ch = fgetc(output_file);
    }
  

  
    if (ch!=EOF)
    {
        fseek (output_file , -1 , SEEK_CUR ) ;
    }
    
    while ( (ch != wordChange1) && (ch != wordChange2) && (ch!=EOF) )
    {
        size++ ;
        ch = fgetc(output_file) ;
    }
    if(size < 1000)
    {
    fseek (output_file , -size, SEEK_CUR ) ;
    fgets(str, size  , output_file) ;
    }
}





void find(char search_for[][100], const int n_strings, int Mth_next[], char get_in[][100])
{
    char temp, search_in[1000] ;
    int a, n_ = 0 ;
    char* flag ;	
    int moreflag = 1;
    
    if (wordChange1== '"' && endTagChooser)
    {
	        strcpy(endTag, end_up_tag);
    }
    
    if (wordChange1 == '>' && endTagChooser)
    {
	    strcpy(endTag, end_greater_tag);
    }
    
    while(  n_  <  n_strings )
    {
        get_next_word(search_in) ;

	while ( !(strCompare( search_in , &search_for[n_][0])) )
        {
		if ( !strCompare(search_in, endTag) )
		{
			get_next_word(search_in) ;
		}
		else
		{
			moreflag= 0;
			strcpy(&get_in[n_][0], "\n");
			break;
		}
	}
	
	if (moreflag)
	{
		a = Mth_next[n_ ] ;
	
		while( a--  )
		{
			get_next_word(search_in) ;	    
		}
		strcpy(&get_in[n_][0], search_in);
        
		n_=n_+1 ;
	}
	else 
		break;
    }
  
}












void test_func(void)
{
    char search_in[1000];
    while(fgetc(output_file)!=EOF)
    {
        get_next_word( search_in);
        fprintf(stderr,"--%s--\n",search_in);
    }
}
